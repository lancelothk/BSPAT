plugins {
    id 'java'
    id 'distribution'
}
//noinspection GroovyAssignabilityCheck
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
            output.resourcesDir = "build/classes/test"
        }
    }
}

version '0.1-beta'

repositories {
    jcenter()
}

dependencies {
    compile 'com.github.samtools:htsjdk:2.1.0'
    compile 'com.google.guava:guava:19.0'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-math3:3.6'
    compile 'net.sf.epsgraphics:epsgraphics:1.2'
    testCompile 'org.testng:testng:6.9.10'
}

test.doFirst {
    useTestNG()
}

@SuppressWarnings("GroovyAssignabilityCheck")
CreateStartScripts buildStartScript(String appName, String mainClass) {
    return buildStartScript(appName, mainClass, []);
}

@SuppressWarnings("GroovyAssignabilityCheck")
CreateStartScripts buildStartScript(String appName, String mainClass, Iterable<String> jvmOpts) {
    task "${appName}StartScript"(type: CreateStartScripts) {
        mainClassName = mainClass
        applicationName = appName
        defaultJvmOpts = jvmOpts
        outputDir = new File(project.buildDir, 'scripts');
        classpath = jar.outputs.files + project.configurations.runtime
        group = "scripts"
    }
}

task addAllStartSctipts(dependsOn: jar) {
    group = "scripts"
    buildStartScript('callBismark', 'edu.cwru.cbc.BSPAT.callBismark.CallBismark').execute()
    buildStartScript('BSPAT', 'edu.cwru.cbc.BSPAT.CLI.BSPAT_pgm').execute()
    buildStartScript('drawFigure', 'edu.cwru.cbc.BSPAT.MethylFigure.MethylFigurePgm').execute()
}

//noinspection GroovyAssignabilityCheck
distributions {
    main {
        contents {
            addAllStartSctipts
            into('bin') {
                from 'build/scripts'
            }
            into('lib') {
                from 'build/libs/'
                from configurations.runtime
            }

            exclude "**/*.bat"
        }
    }
}


distZip.enabled = false
distTar.enabled = false

tasks.withType(Tar) {
    compression = Compression.GZIP
}

installDist.dependsOn build